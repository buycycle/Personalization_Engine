stages:
  - build
  - test
  - helm-update
  - deploy

variables:
  AWS_REGION: eu-central-1
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2
  DOCKER_TLS_CERTDIR: ""
  IMAGE_NAME: $CI_PROJECT_NAME
  S3_CONFIG_PATH: s3://buycycle-env-bucket/rec-api-temp/config.ini
  AWS_ECR_REGISTRY: 930985312118.dkr.ecr.eu-central-1.amazonaws.com/recommendation-api

.build:
  stage: build
  image:
    name: amazon/aws-cli
    entrypoint: [""]
  services:
    - name: docker:dind
      entrypoint: ["env", "-u", "DOCKER_HOST"]
      command: ["dockerd-entrypoint.sh"]
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
    - export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_PROD
    - export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_PROD
  script:
    - echo "Logging in to AWS ECR"
    - export TAG=$(echo $CI_COMMIT_SHA | cut -c 1-5)
    - export IMAGE_TAG="${ENVIRONMENT}-${TAG}"
    - echo "S3 copy"
    - aws s3 cp ${S3_CONFIG_PATH} config/config.ini
    - echo "Build Docker image"
    - docker build -f docker/$DOCKERFILE  --build-arg ENVIRONMENT=$ENVIRONMENT --build-arg AB=$AB   -t $AWS_ECR_REGISTRY:$IMAGE_TAG . --platform="linux/amd64"
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ECR_REGISTRY
    - echo "Pushing Docker image to ECR"
    - docker push $AWS_ECR_REGISTRY:$IMAGE_TAG
  artifacts:
    paths:
      - config/

.test:
  stage: test
  image: python:3.10
  script:
    - mkdir -p data
    - ls -al config/
    - pip install -r requirements.txt
    - python create_data.py ./data/ test
    - pytest -v tests/test_fastapi.py

.helm-update:
  stage: helm-update
  image: python:3.10
  variables:
    CLONE_DIR: /tmp/recommendation-api-ab-test/
    REPO_URL: https://$GIT_USERNAME:$PERSONAL_ACCESS_TOKEN@gitlab.com/buycycle/buycycle-helm.git
    REPO_NAME: buycycle-helm
    APP_NAME: recommendation-api-ab-test
    VALUES_FILE: values.yaml
    BRANCH: main
  script:
    - git config --global user.email "jenkins@buycycle.de"  # Set Git user
    - git config --global user.name "CI_CD"
    - export TAG=$(echo $CI_COMMIT_SHA | cut -c 1-5)
    - export IMAGE_TAG="${ENVIRONMENT}-${TAG}"
    - echo $IMAGE_TAG
    - mkdir -p $CLONE_DIR && cd $CLONE_DIR && git clone https://$GIT_USERNAME:$PERSONAL_ACCESS_TOKEN@gitlab.com/buycycle/buycycle-helm.git
    - ls -al /tmp/recommendation-api-ab-test/buycycle-helm/
    - pip3 install pyyaml
    - python3 /builds/buycycle/recommendation_content/helm-update-script.py  /tmp/recommendation-api-ab-test/buycycle-helm/$ENVIRONMENT/$APP_NAME/$VALUES_FILE $IMAGE_TAG
    - cd /tmp/recommendation-api-ab-test/buycycle-helm/ && git add $ENVIRONMENT/$APP_NAME/$VALUES_FILE && git commit -m "updated during build $APP_NAME $IMAGE_TAG" && git pull --rebase && git push -u origin $BRANCH

.deploy:
  stage: deploy
  image:
    name: alpine:latest
  before_script:
    - apk add --no-cache curl bash
    - curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
    - chmod +x /usr/local/bin/argocd
  script:
    - echo "Syncing and waiting for ArgoCD application..."
    - argocd app sync $ARGO_APP_NAME --server argocd.cube-gebraucht.com --auth-token $ARGOCD_TOKEN --prune
    - argocd app wait $ARGO_APP_NAME --server argocd.cube-gebraucht.com --auth-token $ARGOCD_TOKEN

build:
  extends: .build
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        ENVIRONMENT: live
        DOCKERFILE: main.dockerfile
        AB: stable
    - if: $CI_COMMIT_BRANCH == "dev"
      variables:
        ENVIRONMENT: dev
        DOCKERFILE: dev.dockerfile
        AB: canary

test:
  extends: .test
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
    - if: $CI_COMMIT_BRANCH == "dev"

helm-update:
  extends: .helm-update
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        ENVIRONMENT: live
    - if: $CI_COMMIT_BRANCH == "dev"
      variables:
        ENVIRONMENT: dev

deploy:
  extends: .deploy
  stage: deploy
  rules:
    - if: $CI_COMMIT_BRANCH == "main"
      variables:
        ARGO_APP_NAME: recommendation-api-ab-test
        ENVIRONMENT: live
      when: manual
    - if: $CI_COMMIT_BRANCH == "dev"
      variables:
        ARGO_APP_NAME: recommendation-api-ab-test-dev
        ENVIRONMENT: dev
